0. Создаем новый репозиторий в GITHUB для выполнения данного ДЗ.
GITHUB: 
1. Sign in your account on Github;
2. Click "+" at the top right;
3. Select "New repository" from the dropdown menu;
4. Fill in "Repository name" and "Description" (optional);
5. Check the box next to "Add a README file";
6. Click "Create repository";
7. Enter the created repository and copy the web URL (click "CODE" or copy from the browser address bar);
8. Go to GitBash (Terminal):
$ git clone https://github.com/VladimirTz/GitHub_HW_2.git (Репозиторий скланирован на локальный компьютер).

1. На локальном репозитории сделать ветки для:
- Postman
- Jmeter
- CheckLists
- Bag Reports
- SQL
- Charles
- Mobile testing
$ git branch Postman ; git branch Jmeter ; git branch CheckLists ; git branch Bug_Reports ; git branch SQL ; git branch Charles ; git branch Mobile_testing

2. Запушить все ветки на внешний репозиторий:
$ git push -u origin Postman Jmeter CheckLists Bug_Reports SQL Charles Mobile_testing ; git branch -a
Bug_Reports
  Charles
  CheckLists
  Jmeter
  Mobile_testing
  Postman
  SQL
* main

3. В ветке Bag Reports сделать текстовый документ со структурой баг репорта:
$ git branch
  Bug_Reports
  Charles
  CheckLists
  Jmeter
  Mobile_testing
  Postman
  SQL
* main
$ git checkout Bug_Reports
$ git branch
* Bug_Reports
  Charles
  CheckLists
  Jmeter
  Mobile_testing
  Postman
  SQL
  main
$ git touch bug_report.txt
$ git status
On branch Bug_Reports
Your branch is up to date with 'origin/Bug_Reports'.

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        bug_report.txt
$ vim bug_report.txt (ввели нужные данные)
$ cat bug_report.txt
Структура Bug_report:

1. Заголовок(Headline): кратко опишите проблему, четко указав причину и тип ситуации с ошибкой.
2. Описание(Discription):
- предварительное условие: укажите, что вам нужно сделать, чтобы подготовиться к тестированию проекта.
- шаги для воспроизведения (STR): запишите шаги, пройдя по которым можно воспроизвести ошибку.
- фактический результат (AR): опишите фактический результат. Результат, который мы получаем, выполнив все шаги по воспроизведению
- ожидаемый результат (ER): результат, который должен быть в соответствии с нашими требованиями, то, что мы действительно должны получить. Вы можете добавить ссылку на спецификацию.
3. Проект(Project): напишите название тестируемого проекта.
4. Компонент(Component): укажите название части или функции тестируемого проекта.
5. Версия билда(Version): версия сборки на которой обнаружена ошибка и она воспроизводится.
6. Серьезность(Severity): укажите критичность ошибки: S1 Blocker, S2 Critical, S3 Major, S4 Minor, S5 Trivial.
7. Приоритет(Priority): укажите приоритет ошибки: P1 High, P2 Medium, P3 Low.
8. Статус(Status): статус бага в его жизненном цикле(New, Opened, Postponed, Rejected, Duplicate, Assigned, Fixed, Verified, Reopened, or Closed).
9. Окружение(Environment): операционная система, разрядность, браузер, в котором был обнаружен данный дефект, его версия. Расписываем в каком именно окружении был обнаружен наш дефект.(Dew, Stage, Prod).
10. Автор(Author): Заполните контактные данные репортера об ошибках.
11. Назначено(Assigned to): Напишите имя человека, назначенного для решения проблемы.
12. Вложение(Attachment): Вставьте ссылку на файл журнала, скриншот или любой другой документ, который может помочь прояснить причину ошибки или указать способ решения проблемы.
13. ID дефекта.

4. Запушить структуру багрепорта на внешний репозиторий:
$ git add bug_report.txt
$ git status
On branch Bug_Reports
Your branch is up to date with 'origin/Bug_Reports'.

Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   bug_report.txt
$ git commit -m "create new file bug_report.txt"
$ git push

5. Вмержить ветку Bag Reports в Main:
$ git switch main
$ git merge Bug_Reports -m 'Merging from the Bug_Reports branch into the Main branch'
Merge made by the 'ort' strategy.
 bug_report.txt | 20 ++++++++++++++++++++
 1 file changed, 20 insertions(+)
 create mode 100644 bug_report.txt

6. Запушить main на внешний репозиторий.
$ git push

7. В ветке CheckLists набросать структуру чек листа:
$ git switch CheckLists
$ git branch

  Bug_Reports
  Charles
* CheckLists
  Jmeter
  Mobile_testing
  Postman
  SQL
  main

$ touch checkLists.txt
$ ls
README.md  checkLists.txt
$ vim checkLists.txt
$ cat checkLists.txt

Структура Чек-Листа:

Основные столбцы стандартного Чек-листа:

1. Название первого столбца: ID чек-листа.

2. Название второго столбца: Title (Описание): Краткое описание теста (что тестируем), например: "Поле Email". И этот столбец должен содержать список проверок, например:
2.1. Убедитесь, что поле Email присутствует на странице.
2.2. Проверьте, отображается ли текст метки в поле Email или нет.
2.3. Убедитесь, что текст метки Email совпадает с полем Email.
2.4. Убедитесь, что поле Email  доступно, нажав на поле электронной почты.
2.5. Убедитесь, что пользователь может вставить Email в поле с помощью клавиш клавиатуры Ctrl + v.
2.6. Убедитесь, что пользователь может вставить Email с помощью мыши, щелкнув правой кнопкой мыши в поле Email и вставив Email.
2.7. Проверьте, должно ли отображаться сообщение об ошибке в случае, если пользователь добавляет неверный Email.
2.8. В поле вводим Email в нижнем регистре
2.9. В поле вводим Email в верхнем регистре
2.10. В поле вводим Email с цифрами в имени аккаунта
И так далее...

3. Название третьего столбца: Status(Результат). Этот столбец может содержать только статус Pass(Пройдено) или Failed(Не пройден).

4. Название четвертого столбца: COMMENTS(Комментарии). Если статус проверки Failed(Не пройден), оставляем комментарий о возникшей ошибке.

Можно добавить столбцы для расширенного Чек-листа:

5. Столбец:  Attachment(Вложение). Если статус проверки Failed(Не пройден), следует вставить ссылку на скриншот или любые другие документы, которые могут помочь прояснить проблему.

6. Столбец: какой именно это тест Positive/Negative.

7. Столбец: EXPECTED RESULT(Ожидаемый результат).
______________________________________________________________________________________________________________________________________________________________________________________
8. Запушить структуру на внешний репозиторий:
$ git add checkLists.txt
$ git status
$ git commit -m 'creat file checklists.txt'
$ git status
$ git push

9. На внешнем репозитории сделать Pull Request ветки CheckLists в main:
GITHUB: 
1. Sign in your account on Github as needed;
2. Click the icon of your account at the top left;
3. Select "Your repositories" from the dropdown menu;
4. Choose the "Github_HW2" repository;
5. Click "Compare & pull request";
6. Leave a comment "Merging from the CheckLists branch into the Main branch" and click "Create pull requst";
7. Click "Merge pull request and then "Confirm merge";
8. Go to GitBash (Terminal)

10. Синхронизировать Внешнюю и Локальную ветки Main:
$ git switch main ; git fetch
$ git pull
Already up to date.
